volumes:
    ghi:
        external: true
    yovies-data:
        external: true
services:
    react:
        image: node:lts-bullseye
        command: /bin/bash run.sh
        working_dir: /app
        volumes:
            - ./ghi:/app
        ports:
            - "3000:3000"
        environment:
            HOST_OS: ${OS}
            NODE_ENV: development
            HOST: "0.0.0.0"
            REACT_APP_TMDB_API_KEY: ${REACT_APP_TMDB_API_KEY}
            REACT_APP_TMDB_URL: https://api.themoviedb.org/3
            REACT_APP_OMDB_API_KEY: ${REACT_APP_OMDB_API_KEY}
            REACT_APP_OMDB_URL: http://www.omdbapi.com
            REACT_APP_ACCOUNTS_HOST: http://localhost:8080
            DJWTO_SIGNING_KEY: ${DJWTO_SIGNING_KEY}
            REACT_APP_REVIEWS_HOST: http://localhost:8090
    database:
        build:
            context: ./relational-data
            dockerfile: ./Dockerfile.dev
        volumes:
            - yovies-data:/var/lib/postgresql/data
        environment:
            - POSTGRES_MULTIPLE_DATABASES=movies,reviews,accounts
            - POSTGRES_PASSWORD=test-databases

        ports:
            - 15432:5432
    movie-api:
        build:
            context: ./movies/api
            dockerfile: ./Dockerfile.dev
        ports:
            - "8100:8000"
        volumes:
            - ./movies/api:/app
        depends_on:
            - database
        environment:
            DATABASE_URL: postgresql://movies:password@database:5432/movies
            WAIT_HOSTS: database:5432
    account-api:
        build:
            context: ./accounts/api
            dockerfile: ./Dockerfile.dev
        ports:
            - "8080:8000"
        volumes:
            - ./accounts/api:/app
        depends_on:
            - database
        environment:
            DATABASE_URL: postgresql://accounts:password@database:5432/accounts
            # DATABASE_URL: postgresql://account-api:password@database:5432/account-api
            WAIT_HOSTS: database:5432
            DJWTO_SIGNING_KEY: ${DJWTO_SIGNING_KEY}
    reviews-api:
        build:
            context: ./reviews/api
            dockerfile: ./Dockerfile.dev
        ports:
            - "8090:8000"
        volumes:
            - ./reviews/api:/app
            #mount volume and run container. Then make
        depends_on:
            - database
        environment:
            DATABASE_URL: postgresql://reviews:password@database:5432/reviews
            # DATABASE_URL: postgresql://reviews-api:password@database:5432/reviews-api
            WAIT_HOSTS: database:5432
    reviews-poller:
        build:
            context: ./reviews/poll
            dockerfile: ./Dockerfile.dev
        volumes:
            - ./reviews/poll:/app
            - ./reviews/api/reviews_project:/app/reviews_project
            - ./reviews/api/reviews_rest:/app/reviews_rest
        depends_on:
            - database
            - reviews-api
        environment:
            ACCOUNT_SERVICE_URL: http://account-api:8000
            DATABASE_URL: postgresql://reviews:password@database:5432/reviews
            WAIT_HOSTS: database:5432, reviews-api:8000
            WAIT_TIMEOUT: 240
